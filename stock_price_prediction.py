# -*- coding: utf-8 -*-
"""stock price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oJpTRLsFZGsEbcUIYOg6D6xHHj11lsd9

**Importing Required Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

"""**Downloading dataset**"""

import requests
url = 'https://pastebin.com/raw/0AyVkbZx'
r = requests.get(url, allow_redirects=True)
open('SAHYADRI.BO.csv', 'wb').write(r.content)

data = pd.read_csv("SAHYADRI.BO.csv")

data

data.head()

"""**Checking for null**"""

data.isnull().sum()

"""**Removing the NaN values**"""

data.dropna(how='any' , inplace=True)

data.describe()

data.corr()

"""**Preparing Training Data**

> Since we have next day's Open price as current day's y value, we remove last row from training set.

> Adj Close, Volume and Date column is removed






"""

train = data.drop(['Adj Close' , 'Volume' , 'Date'],axis=1)
train.drop(train.tail(1).index,inplace=True)

train.shape

"""**Preparing y values of the training dataset**
> shifted one row as day 1's Opening is day 0's y value
"""

labels = data['Open']
labels = labels[1:]

labels.head()

plt.plot(labels)

"""**Train-Test splitting**"""

from sklearn.linear_model import LinearRegression
reg = LinearRegression()
from sklearn.model_selection import train_test_split
x_train , x_test , y_train , y_test = train_test_split(train,
                    labels ,test_size = 0.40,random_state =10)

"""**Training the Linear regression**"""

x_train.corr()

reg.fit(x_train,y_train)

reg.score(x_test,y_test)



print(reg.coef_)

print(reg.intercept_)

"""**Prediction on test data**"""

predicted=reg.predict(x_test)
dfr=pd.DataFrame({'Actual':y_test,'Predicted':predicted})

print(dfr)

import sklearn.metrics as metrics
import math

print('Mean Absolute Error:',metrics.mean_absolute_error(y_test,predicted))
print('Mean Squared  Error:',metrics.mean_squared_error(y_test,predicted))
print('Root Mean Squared Error:',math.sqrt(metrics.mean_squared_error(y_test,predicted)))

graph=dfr.head(20)

"""**Plotting the actual prices vs predicted prices**"""

graph.plot(kind='bar')

